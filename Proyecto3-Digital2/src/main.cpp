//*****************************************************************************
// Universidad del Valle de Guatemala
// BE3015 - Electr√≥nica Digital 2
// Proyecto 3 - Mar√≠a Alejandra Rodr√≠guez
// Sensor de temperatura I2C - Comunicaci√≥n con TIVA C y Pantalla SPI
//*****************************************************************************
//*****************************************************************************
// Librer√≠as
//*****************************************************************************
#include <Arduino.h> 
#include <Adafruit_NeoPixel.h> //Librer√≠a que permitir√° codificar el neop√≠xel 
#ifdef __AVR__
  #include <avr/power.h>
#endif
#include <Temperature_LM75_Derived.h> //Librer√≠a que implementa la comunicaci√≥n I2C con el sensor
#include <Wire.h> //Para la comunicaci√≥n I2C

//*****************************************************************************
//  Definici√≥n de pines
//*****************************************************************************
#define RX_2 16       // Para comunicaci√≥n serial con TIVA
#define TX_2 17       // Para comunicaci√≥n serial con TIVA
#define CIRCLE_PIN 25 // Para la conexi√≥n del Neop√≠xel
#define NUM_CIRCLE_LEDS 24 //N√∫mero de pines del Neop√≠xel 
#define BRIGHT 50   // Brillo del Neop√≠xel
#define LM75_ADDRESS 0x48 // Direcci√≥n I2C del sensor LM75

//Creaci√≥n del objeto del Neop√≠xel para poder hacer diferentes dise√±os con colores
Adafruit_NeoPixel circle = Adafruit_NeoPixel(NUM_CIRCLE_LEDS, CIRCLE_PIN, NEO_GRB + NEO_KHZ800); 

//*****************************************************************************
// Prototipos de funci√≥n
//*****************************************************************************
float readTemperature(); //Para leer temperatura con sensor I2C
void encenderTodos(void); //Para encender todos los leds en estado de espera
void apagarTodos(void); //Funci√≥n para apagar el neop√≠xel 
void enviando (void); //Para indicar que est√° enviando el dato le√≠do de temperatura
void color_TEMP(void); //Para indicar en que estado est√° la temperatura 
void guardando(void); //Para indicar que est√° guardando los datos en la SD

//*****************************************************************************
// Variables Globales
//*****************************************************************************
float temp; //Para guardar la lectura de temperatura
int senal; //Para leer y almacenar la se√±al que env√≠a TIVA C
Generic_LM75 temperature; //Crear el sensor con la librer√≠a
const float TEMP_LOW = 25.0; //Valor m√≠nimo de temperatura para considerarlo en estado bajo 
const float TEMP_MEDIUM = 27.0; //Valor medio de temperatura para considerarlo en estado medio
const float TEMP_HIGH = 30.0; //Valor medio de temperatura para considerarlo en estado alto 

//*****************************************************************************
// Configuraci√≥n
//*****************************************************************************
void setup() {
  // Comunicaci√≥n UART0 con la computadora Serial (0)
  Serial.begin(115200);
  Wire.begin(21, 22); //Para el funcionamiento de I2C
  Serial.println("Se configur√≥ Serial 0");
  Serial2.begin(115200, SERIAL_8N1, RX_2, TX_2); // Establecer comunicaci√≥n serial con TIVA

  //Inicializaci√≥n del Neop√≠xel 
  circle.begin();
  circle.clear();
  circle.setBrightness(BRIGHT);
}

//*****************************************************************************
// Loop
//*****************************************************************************
void loop() {
  //Colocar el Neop√≠xel en estado de espera
  encenderTodos(); //Titila en color amarillo
  delay(500);
  apagarTodos(); 
  delay(500);
  // Recibir datos de la TIVA C
  if (Serial2.available()) {
    senal = Serial2.read();
  }

  //Verificar si la se√±al es para leer temperatura 
  if (senal == '1') {
    float temperature = readTemperature(); //Leer temperatura del sensor
    enviando(); //Estado de env√≠o de datos en el neop√≠xel 
    delay(3000);
    Serial2.println(temperature); //Enviar dato a TIVA
    Serial.print("Dato enviado a TIVA C: "); 
    Serial.print(temperature);
    Serial.print("¬∞C üå°Ô∏è \n");
    apagarTodos(); //Apagar el Neop√≠xel 
    delay(500);
    color_TEMP(); //Encender Neop√≠xel seg√∫n estado de la temperatura 
    delay(3000);
    senal = 0; //Regresar la se√±al a 0, para esperar intrucciones de TIVA
  }

  //Verificar si la se√±al es para guardar datos 
  if (senal == '2') {
    Serial.print("Se√±al recibida de TIVA C: ");
    Serial.print("Datos guardados en SD \n"); //Indicar que est√° guardando los datos 
    guardando(); //Encender el Neop√≠xel en el color que indica que los guard√≥ 
    delay(3000);
    senal = 0; //Regresar la se√±al a 0, para esperar intrucciones de TIVA
  }
}

//*****************************************************************************
// Funciones
//*****************************************************************************
//Funci√≥n para leer la temperatura con el sensor I2C
float readTemperature() {
  Wire.beginTransmission(LM75_ADDRESS); //Leer la temperatura a trav√©s de I2C y Wire
  Wire.write(0x00); // Registro de lectura de temperatura (0x00 para lectura)
  Wire.endTransmission();

  Wire.requestFrom(LM75_ADDRESS, 2); // Se solicitan 2 bytes de datos de temperatura
  int16_t tempData = (Wire.read() << 8) | Wire.read(); // Combinar los bytes recibidos

  float temperature = tempData / 256.0; // Convertir datos a grados Celsius
  return temperature;
}

//Funci√≥n para encender todos los leds del Neop√≠xel para el estado de espera
void encenderTodos() {
  for (int i = 0; i < NUM_CIRCLE_LEDS; i++) {
    circle.setPixelColor(i, circle.Color(130, 130, 0)); // Establecer color amarillo en el LED actual
  }
  circle.show(); // Mostrar los cambios en los LEDs
}

//Funci√≥n para apagar todos los leds
void apagarTodos() {
  for (int i = 0; i < NUM_CIRCLE_LEDS; i++) {
    circle.setPixelColor(i, circle.Color(0, 0, 0)); // Apagar el LED actual
  }
  circle.show(); // Mostrar los cambios en los LEDs
}

//Funci√≥n para encender todos los leds e indicar que est√° enviando el dato 
void enviando () {
  for (int i = 0; i < NUM_CIRCLE_LEDS; i++) {
    circle.setPixelColor(i, circle.Color(random(255), random(255), random(255))); // Establecer color aleatorio a cada led 
  }
  circle.show(); // Mostrar los cambios en los LEDs
}

//Funci√≥n para verificar los l√≠mites de temperatura y encender los leds de acuerdo al valor 
void color_TEMP () {
  float temperature = readTemperature();
  if(temperature < TEMP_LOW) {
    for (int i = 0; i < NUM_CIRCLE_LEDS; i++) {
      circle.setPixelColor(i, circle.Color(0, 0, 255)); // Color AZUL, temperatura baja
    }
    circle.show(); // Mostrar los cambios en los LEDs
  } else if (temperature >= TEMP_LOW && temperature < TEMP_MEDIUM) {
    for (int i = 0; i < NUM_CIRCLE_LEDS; i++) {
      circle.setPixelColor(i, circle.Color(0, 255, 0)); // Color VERDE, temperatura ambiente 
    }
    circle.show(); // Mostrar los cambios en los LEDs
  } else if (temperature >= TEMP_MEDIUM && temperature <= TEMP_HIGH) {
    for (int i = 0; i < NUM_CIRCLE_LEDS; i++) {
      circle.setPixelColor(i, circle.Color(255, 0, 0)); // Color ROJO, temperatura alta 
    }
    circle.show(); // Mostrar los cambios en los LEDs
  }
}

//Funci√≥n para encender los leds e indicar que est√° en estado de guardar datos 
void guardando () { 
  for (int i = 0; i < NUM_CIRCLE_LEDS; i++) {
    circle.setPixelColor(i, circle.Color(200, 120, 120)); // Color para indicar que est√° guardando 
  }
  circle.show(); // Mostrar los cambios en los LEDs
}
